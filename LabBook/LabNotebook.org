#+AUTHOR: Austin Vihncent Skeeters
#+EMAIL:  avs11d@my.fsu.edu
#+STARTUP: showall
#+STARTUP: showstars
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LATEX_CLASS: book
#+LaTeX_CLASS_OPTIONS: [listings, listings-color, listings-bw]
#+LaTeX_CLASS_OPTIONS: [11 pt , letterpaper , twoside , openright]
#+LATEX_HEADER: \usepackage[AUTO]{inputenc}
#+LaTeX_HEADER: \lstset{tabsize=4,language=C++,captionpos=b,frame=lines,numbers=left,numberstyle=\tiny,numbersep=5pt,breaklines = true,showstringspaces=false,basicstyle=\footnotesize,keywordstyle=\color{blue},commentstyle=\color{red},stringstyle=\color{green}}
#+LaTeX_HEADER: \lstset{tabsize=4,language=Python,captionpos=b,frame=lines,numbers=left,numberstyle=\tiny,numbersep=5pt,breaklines = true,showstringspaces=false,basicstyle=\footnotesize,keywordstyle=\color{blue},commentstyle=\color{red},stringstyle=\color{green}}
#+LaTeX_HEADER: \lstset{tabsize=4,language=sh,captionpos=b,frame=lines,numbers=left,numberstyle=\tiny,numbersep=5pt,breaklines = true,showstringspaces=false,basicstyle=\footnotesize,keywordstyle=\color{blue},commentstyle=\color{red},stringstyle=\color{green}}
#+LaTeX_HEADER: \lstset{tabsize=4,language=bash,captionpos=b,frame=lines,numbers=left,numberstyle=\tiny,numbersep=5pt,breaklines = true,showstringspaces=false,basicstyle=\footnotesize,keywordstyle=\color{blue},commentstyle=\color{red},stringstyle=\color{green}}

* TODO Things to do [11/11]                                          :export:
  - [X] Update macro to take command line argument for Cluster
    Cleaning and Cross-Talk Inversion parameters
  - [X] Update anything that prints or saves to include CC and CT [8/8]
    designations.
    - [X] ListOfFiles function to change to the appropriate directory
    - [X] Appropriate root file name to WriteStandardDistributions
    - [X] WriteGenFracTrackVsBeta
    - [X] WriteIhVsP
    - [X] WritePrecoVsPgen
    - [X] WriteBrecoVsBgen
    - [X] WriteBgenVsEtagen      
    - [X] Update the output ROOT file to include a CC and CT designation
  - [X] Plot Ih Vs P for Reco particles [2/2]
    - [X] Assuming correct charge
    - [X] Not assuming correct charge (Correct P by multiplying by Q)
  - [X] Add to primitive distributions
    - [X] recoMassCorr
    - [X] recoMassUncorr
    - [X] genMass
    - [X] recoPCorr / recoPtCorr
    - [X] recoPUncorr / recoPtUncorr
    - [X] genP / Pt
  - [X] Update AllocateDistributions function to exclude respective
    gen/reco variables for reco/gen distributions, respectively
  - [X] Plot reco mass distributions [2/2]
    - [X] With knowing correct charge
    - [X] Without knowing correct charge
  - [X] Plot reco mass vs gen mass [2/2] (Take ratio Mr/Mg dists for
    known and unknown)
    - [X] With knowing correct charge
    - [X] Without knowing correct charge
  - [X] Plot TOF for gen particles
  - [X] Plot Beta for gen and reco particles [2/2]
    - [X] 1/TOF for reco particles
    - [X] PC/E for gen particles
  - [X] Plot Beta reco vs beta gen (1/TOF reco) (PC/E gen) [2/2]
    - [X] Mass scan for a fixed charge
    - [X] Charge scan for a fixed mass
  - [X] Fix how mass is calculated. Different for gen and reco. Gen
    just use known.

* HSCP Analysis                                                      :export:
** File Generation
*** Useful Twikis
  - https://twiki.cern.ch/twiki/bin/viewauth/CMS/Hscp2014Analysis#Instructions_to_produce_HSCP_sam
  - https://twiki.cern.ch/twiki/bin/view/Main/BatchJobs
  - https://twiki.cern.ch/twiki/bin/view/CMSPublic/SWGuideCmsDriver
*** AOD Files
**** Configuration File Creation

***** Available MC Particle Data
      The directory that contains the list of PYTHIA information for the
      various available particles is:
      #+BEGIN_SRC sh
/afs/cern.ch/work/a/askeeter/private/CMSSW_7_4_4_patch4/src/Configuration/GenProduction/python/ThirteenTeV/
      #+END_SRC
      
      The list of available files is:
    #+tblname: AvailablePythiaInfoTable
| Filename                                           |
|----------------------------------------------------|
| HSCPmchamp12_M_300_TuneZ2star_13TeV_pythia6_cff.py |
| HSCPmchamp12_M_900_TuneZ2star_13TeV_pythia6_cff.py |
| HSCPmchamp15_M_300_TuneZ2star_13TeV_pythia6_cff.py |
| HSCPmchamp15_M_900_TuneZ2star_13TeV_pythia6_cff.py |
| HSCPmchamp18_M_300_TuneZ2star_13TeV_pythia6_cff.py |
| HSCPmchamp18_M_900_TuneZ2star_13TeV_pythia6_cff.py |
| HSCPmchamp1_M_300_TuneZ2star_13TeV_pythia6_cff.py  |
| HSCPmchamp1_M_900_TuneZ2star_13TeV_pythia6_cff.py  |
| HSCPmchamp24_M_300_TuneZ2star_13TeV_pythia6_cff.py |
| HSCPmchamp24_M_900_TuneZ2star_13TeV_pythia6_cff.py |
| HSCPmchamp2_M_300_TuneZ2star_13TeV_pythia6_cff.py  |
| HSCPmchamp2_M_900_TuneZ2star_13TeV_pythia6_cff.py  |
| HSCPmchamp30_M_300_TuneZ2star_13TeV_pythia6_cff.py |
| HSCPmchamp30_M_900_TuneZ2star_13TeV_pythia6_cff.py |
| HSCPmchamp36_M_300_TuneZ2star_13TeV_pythia6_cff.py |
| HSCPmchamp36_M_900_TuneZ2star_13TeV_pythia6_cff.py |
| HSCPmchamp3_M_1000_TuneZ2star_13TeV_pythia6_cff.py |
| HSCPmchamp3_M_100_TuneZ2star_13TeV_pythia6_cff.py  |
| HSCPmchamp3_M_1400_TuneZ2star_13TeV_pythia6_cff.py |
| HSCPmchamp3_M_1800_TuneZ2star_13TeV_pythia6_cff.py |
| HSCPmchamp3_M_200_TuneZ2star_13TeV_pythia6_cff.py  |
| HSCPmchamp3_M_2200_TuneZ2star_13TeV_pythia6_cff.py |
| HSCPmchamp3_M_2600_TuneZ2star_13TeV_pythia6_cff.py |
| HSCPmchamp3_M_300_TuneZ2star_13TeV_pythia6_cff.py  |
| HSCPmchamp3_M_400_TuneZ2star_13TeV_pythia6_cff.py  |
| HSCPmchamp3_M_600_TuneZ2star_13TeV_pythia6_cff.py  |
| HSCPmchamp3_M_800_TuneZ2star_13TeV_pythia6_cff.py  |
| HSCPmchamp3_M_900_TuneZ2star_13TeV_pythia6_cff.py  |
| HSCPmchamp48_M_300_TuneZ2star_13TeV_pythia6_cff.py |
| HSCPmchamp48_M_900_TuneZ2star_13TeV_pythia6_cff.py |
| HSCPmchamp60_M_300_TuneZ2star_13TeV_pythia6_cff.py |
| HSCPmchamp60_M_900_TuneZ2star_13TeV_pythia6_cff.py |
| HSCPmchamp6_M_1000_TuneZ2star_13TeV_pythia6_cff.py |
| HSCPmchamp6_M_100_TuneZ2star_13TeV_pythia6_cff.py  |
| HSCPmchamp6_M_1400_TuneZ2star_13TeV_pythia6_cff.py |
| HSCPmchamp6_M_1800_TuneZ2star_13TeV_pythia6_cff.py |
| HSCPmchamp6_M_200_TuneZ2star_13TeV_pythia6_cff.py  |
| HSCPmchamp6_M_2200_TuneZ2star_13TeV_pythia6_cff.py |
| HSCPmchamp6_M_2600_TuneZ2star_13TeV_pythia6_cff.py |
| HSCPmchamp6_M_300_TuneZ2star_13TeV_pythia6_cff.py  |
| HSCPmchamp6_M_400_TuneZ2star_13TeV_pythia6_cff.py  |
| HSCPmchamp6_M_600_TuneZ2star_13TeV_pythia6_cff.py  |
| HSCPmchamp6_M_800_TuneZ2star_13TeV_pythia6_cff.py  |
| HSCPmchamp6_M_900_TuneZ2star_13TeV_pythia6_cff.py  |
| HSCPmchamp9_M_300_TuneZ2star_13TeV_pythia6_cff.py  |
| HSCPmchamp9_M_900_TuneZ2star_13TeV_pythia6_cff.py  |
|----------------------------------------------------|

***** Creating by Hand

      AOD files include all of the information from the simulation. That
      is, everything from the detector is included. We do not need all
      of this information, and it will get stripped down later. An
      example command to create configuration files for the creation of
      the AOD files is as follows:

    #+BEGIN_EXAMPLE
      cmsDriver.py Configuration/GenProduction/python/ThirteenTeV/HSCPmchamp6_M_1400_TuneZ2star_13TeV_pythia6_cff.py --fileout file:mchamp6_M_1400_AOD.root --mc --eventcontent AODSIM --datatier GEN-SIM-DIGI-AOD --conditions MCRUN2_74_V8 --step GEN,SIM,DIGI,L1,DIGI2RAW,HLT:GRun,RAW2DIGI,L1Reco,RECO --python_filename mchamp6_M_1400__cfg.py --magField 38T_PostLS1 --geometry Extended2015 --customise SimG4Core/CustomPhysics/Exotica_HSCP_SIM_cfi.customise,SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1 --no_exec -n 10
    #+END_EXAMPLE
***** Creating by Automation

    Automation of the above has been accomplished by means of a
    bash script. This script will create the corresponding
    configuration file for the given charge, mass and event number as
    specified in the appropriate org code snippet variables available
    below in the runner.
    #+NAME: cfg-creator
    #+BEGIN_SRC sh :exports code :tangle ../HSCP_MC_Creation/Scripts/cfgCreator.sh 
      #!/bin/bash
      CHARGE=$1
      MASS=$2
      EVENTS=$3
      cmsDriver.py Configuration/GenProduction/python/ThirteenTeV/HSCPmchamp${CHARGE}_M_${MASS}_TuneZ2star_13TeV_pythia6_cff.py --fileout file:mchamp${CHARGE}_M_${MASS}_AOD.root --mc --eventcontent AODSIM --datatier GEN-SIM-DIGI-AOD --conditions MCRUN2_74_V8 --step GEN,SIM,DIGI,L1,DIGI2RAW,HLT:GRun,RAW2DIGI,L1Reco,RECO --python_filename mchamp${CHARGE}_M_${MASS}_cfg.py --magField 38T_PostLS1 --geometry Extended2015 --customise SimG4Core/CustomPhysics/Exotica_HSCP_SIM_cfi.customise,SLHCUpgradeSimulations/Configuration/postLS1Customs.customisePostLS1 --no_exec -n ${EVENTS}
    #+END_SRC

    The above can be run in the appropriate directory by executing the
    following within the Org file:
    #+NAME: cfg-creator-runner
    #+BEGIN_SRC sh :exports both :results output :var mass="1400" :var charge="6" :var events="1000" :dir /ssh:askeeter@lxplus.cern.ch:/afs/cern.ch/work/a/askeeter/private/CMSSW_7_4_4_patch4/src/
      sh cfgCreator.sh ${charge} ${mass} ${events} 
    #+END_SRC
**** Running Configuration Files

     Once all of these steps, whether by hand or by automation have
     been completed, the user should be left with all of the
     requested AOD Root files, as well as the left over configuration
     files for everything that has been ran.
***** Running by Hand     

      Now, once the appropriate configuration files are created, they
      need to be sent to the CERN Batch service to run. The above
      cmsDriver command includes all steps including the full
      simulation. To send files to the batch service, a script must be
      used. An example script is as follows:
      
    #+NAME: batch-script-example
    #+BEGIN_SRC sh
      #! /bin/sh
      CMSSW_PROJECT_SRC="/afs/cern.ch/work/a/askeeter/private/CMSSW_7_4_4_patch4/src/"
      CFG_FILE="mchamp6_M_1400_cfg.py"
      OUTPUT_FILE="mchamp6_M_1400.root"
      TOP="$PWD"

      cd $CMSSW_PROJECT_SRC
      eval `scramv1 runtime -sh`
      cd $TOP
      cmsRun $CMSSW_PROJECT_SRC/$CFG_FILE
      rfcp $OUTPUT_FILE $CMSSW_PROJECT_SRC$OUTPUT_FILE
    #+END_SRC

      After the script is created though, make sure to change the file
      permissions with:
    #+BEGIN_SRC sh
      chmod 744 lxplusbatchscript.sh
    #+END_SRC
    
      Now the job(s) must be submitted to the batch service:
    #+NAME: batch-sender-example
    #+BEGIN_SRC sh
      bsub -R "pool>30000" -q 1nw -J job1 < lxplusbatchscript.csh
    #+END_SRC
      Where the following options are true: 
    - "-R" "pool>30000" means that you want a minimum free space of 30GB
    to run your job. 
    - "-q" 1nw means you are submitting to the 1-week que. Other available
    queues are:
     - 8nm (8 minutes)
     - 1nh (1 hour)
     - 8nh
     - 1nd (1 day)
     - 2nd (2 days)
     - 1nw (1 week)
     - 2nw
     - -J job1 sets job1 as your job name
     - < lxplusbatchscript.sh gives your script to the job.
       
     Check your job status with: "bjobs"
     Kill jobs with "bkill -J job1"
     Using bkill without any job specified will kill ALL of your jobs.

***** Running by Automation

      All of the aforemntioned can be accomplished automatically by
      means of the following scripts:

      #+NAME: batch-creator  
      #+BEGIN_SRC sh :exports both :tangle ../HSCP_MC_Creation/Scripts/batchCreator.sh :dir /ssh:askeeter@lxplus.cern.ch:/afs/cern.ch/work/a/askeeter/private/CMSSW_7_4_4_patch4/src
        #!/bin/bash

        #Populate an array of all of the configuration files
        shopt -s nullglob
        filearray=( "HSCP_MC_cfg_Files"/* )
        shopt -u nullglob

        #Create a bash file for each config file
        for file in "${filearray[@]}"
        do
            parts=(${file//_/ })
            charge=${parts[3]}
            #Extract the number from the charge
            chargeFixed=$(echo $charge | tr -dc '0-9')
            mass=${parts[5]}

            #All of the important data has been stripped from the config filename
            #Now to create the bath scripts
            filename="mchamp${chargeFixed}_M_${mass}.sh"
            cfgfile="mchamp${chargeFixed}_M_${mass}_cfg.py"
            rootfile="mchamp${chargeFixed}_M_${mass}_AOD.root"
            #Create an empty file to be filled
            touch $filename
            #Use echo to populate the file contents. Not the cleanest way, but it works for a file this short.
            echo "#!/bin/sh">$filename
            echo 'CMSSW_PROJECT_SRC="/afs/cern.ch/work/a/askeeter/private/CMSSW_7_4_4_patch4/src/"'>>$filename
            echo """CFG_FILE='/afs/cern.ch/work/a/askeeter/private/CMSSW_7_4_4_patch4/src/HSCP_MC_cfg_Files/${cfgfile}'""">>$filename
            echo """OUTPUT_FILE='/afs/cern.ch/work/a/askeeter/private/CMSSW_7_4_4_patch4/src/HSCP_MC_Root_Files/$rootfile'""">>$filename
            echo "OUT_FILE='$rootfile'">>$filename
            echo 'TOP="$PWD"'>>$filename
            echo 'cd $CMSSW_PROJECT_SRC'>>$filename
            echo 'eval `scramv1 runtime -sh`'>>$filename
            echo 'cd $TOP'>>$filename
            echo 'cmsRun $CFG_FILE'>>$filename
            echo 'rfcp $OUT_FILE $OUTPUT_FILE'>>$filename
            #DO NOT FORGET to change the config file permissions if you are creating these by hand.
            chmod 744 $filename
        done

      #+END_SRC

      The above places all created files in certain directories that
      are expected to remain constant. Should these change, all of the
      automation scripts will need to be updated, although the "by
      hand" methods will remain independent.
      
      After running the batch-creator script, we will have all of the
      necessary batch files that we need to run in order to utilize
      the appropriate configuration file to produce a corresponding
      AOD Root file.
      
      #+NAME: batch-sender
      #+BEGIN_SRC sh :exports both :tangle ../HSCP_MC_Creation/Scripts/batchSender.sh :dir /ssh:askeeter@lxplus.cern.ch:/afs/cern.ch/work/a/askeeter/private/CMSSW_7_4_4_patch4/src
        #!/bin/bash

        #Populate an array of all of the batch scripts 
        shopt -s nullglob
        filearray=( "HSCP_MC_sh_Files"/* )
        shopt -u nullglob

        for file in "${filearray[@]}"
        do
            #Strip off the chracters that we dont need
            fileFixed=${file:17}
            #Send to the two day queue. This can be changed
            bsub -R "pool>20000" -q 2nd -J $fileFixed < /afs/cern.ch/work/a/askeeter/private/CMSSW_7_4_4_patch4/src/HSCP_MC_sh_Files/$fileFixed
        done

      #+END_SRC
      
*** EDM Files
**** Creation by Hand

    Once the creation of the AOD files is complete, they need to be
    converted into something that is a bit smaller, containing only
    the information that we need. Basically, this process involves
    cutting out some of the "meat" of the AOD files, reducing their
    size, but not (at least for our purposes) their utility.
    
    A single file needs to be modified that dictates to cmsRun which
    AOD file that you would like to convert to EDM. The file resembles
    the following:

    #+BEGIN_SRC python
      import sys, os
      import FWCore.ParameterSet.Config as cms
      #Makes EDM from AOD
      isSignal = True
      isBckg = False
      isData = False
      isSkimmedSample = False
      GTAG = 'MCRUN2_74_V8'
      OUTPUTFILE = '/afs/cern.ch/work/a/askeeter/private/CMSSW_7_4_4_patch4/src/HSCP_MC_Root_Files/mchamp3_M_400_EDM.root'

      #InputFileList = cms.untracked.vstring()

      #debug input files 
      #this list is overwritten by CRAB
      InputFileList = cms.untracked.vstring(
          #The comment is an example of how to do this from a remote directory
          #'root://cmseos.fnal.gov//eos/uscms/store/user/aackert/HSCP/AODgen/condorjdls/step2_condortest.root',
          #Below is the file that you want to conver from AOD to EDM
          'file:/afs/cern.ch/work/a/askeeter/private/CMSSW_7_4_4_patch4/src/HSCP_MC_Root_Files/mchamp3_M_400_AOD.root'
      )


      #main EDM tuple cfg that depends on the above parameters
      execfile( os.path.expandvars('${CMSSW_BASE}/src/SUSYBSMAnalysis/HSCP/test/MakeEDMtuples/HSCParticleProducer_cfg.py') )
    #+END_SRC

    This file is located at:
    =/afs/cern.ch/work/a/askeeter/private/CMSSW_7_4_4_patch4/src/SUSYBSMAnalysis/HSCP/test/MakeEDMtuples/HSCParticleProducer_Signal_cfg.py=

    The lines that need to be altered here are "OUTPUTFILE", and
    'file:/afs/cern/ch/...' which are basically telling the program
    the name of the EDM file that you would like created when the
    cmsRun has been ran, and the name of the input file(s). If you
    have had to split up a job into multiple smaller files (that is,
    you have split up a large AOD into several smaller ones), simply
    include the names of each of those files in the "InputFileList",
    separated by commas and endlines. It is simply a python array.

    Once this file has been altered, the conversion is accomplished
    simply by running the following:

    #+BEGIN_SRC sh
      cmsRun HSCParticleProducer_Signal_cfg.py
    #+END_SRC
    
    These jobs can also be sent to the batch service if you would
    like, however scripts would still need to be created just as with
    the AOD files.

**** Creation by Automation

     All of the aforementioned can be accomplished by means of two
     automation scripts. One script, as with the batchCreator script,
     is only responsible for the creation of the Python configuration
     file dictating the terms of the AOD to EDM conversion. The other,
     as is similar again, is responsible for executing the conversion
     jobs.

     #+NAME: aod-to-edm-creator
     #+BEGIN_SRC sh :exports both :tangle ../HSCP_MC_Creation/Scripts/AodToEdmCreator.sh :dir /ssh:askeeter@lxplus.cern.ch:/afs/cern.ch/work/a/askeeter/private/CMSSW_7_4_4_patch4/src
       #!/bin/bash

       #Populate an array of all of the AOD files
       shopt -s nullglob
       filearray=( "HSCP_MC_Root_Files"/*AOD* )
       shopt -u nullglob

       for file in "${filearray[@]}"
       do
           parts=(${file//_/ })
           charge=${parts[3]}
           #Extract the number from the charge
           chargeFixed=$(echo $charge | tr -dc '0-9')
           mass=${parts[5]}    
           aod_file="mchamp${chargeFixed}_M_${mass}_AOD.root"
           root_file="mchamp${chargeFixed}_M_${mass}_EDM.root"
           python_file="mchamp${chargeFixed}_M_${mass}_cfg.py"
           
           cat > /afs/cern.ch/work/a/askeeter/private/CMSSW_7_4_4_patch4/src/HSCP_MC_AODtoEDM_Python_Files/${python_file} << EOF
       import sys, os
       import FWCore.ParameterSet.Config as cms
       #Makes EDM from AOD
       isSignal = True
       isBckg = False
       isData = False
       isSkimmedSample = False
       GTAG = 'MCRUN2_74_V8'
       OUTPUTFILE = '/afs/cern.ch/work/a/askeeter/private/CMSSW_7_4_4_patch4/src/HSCP_MC_Root_Files/${root_file}'

       InputFileList = cms.untracked.vstring(
       'file:/afs/cern.ch/work/a/askeeter/private/CMSSW_7_4_4_patch4/src/HSCP_MC_Root_Files/${aod_file}'
       )

       execfile( '${CMSSW_BASE}/src/SUSYBSMAnalysis/HSCP/test/MakeEDMtuples/HSCParticleProducer_cfg.py' )
       EOF
           
       done

     #+END_SRC
     
     #+NAME: aod-to-edm-runner
     #+BEGIN_SRC sh :exports both :tangle ../HSCP_MC_Creation/Scripts/AodToEdmRunner.sh :dir /ssh:askeeter@lxplus.cern.ch:/afs/cern.ch/work/a/askeeter/private/CMSSW_7_4_4_patch4/src
       #!/bin/bash

       shopt -s nullglob
       filearray=( "HSCP_MC_Root_Files"/*AOD* )
       shopt -u nullglob

       for file in "${filearray[@]}"
       do
           parts=(${file//_/ })
           charge=${parts[3]}
           #Extract the number from the charge
           chargeFixed=$(echo $charge | tr -dc '0-9')
           mass=${parts[5]}    
           aod_file="mchamp${chargeFixed}_M_${mass}_AOD.root"
           root_file="mchamp${chargeFixed}_M_${mass}_EDM.root"
           python_file="mchamp${chargeFixed}_M_${mass}_cfg.py"
          
           #Replace the standard configuration file with the one currently being ran
           cp /afs/cern.ch/work/a/askeeter/private/CMSSW_7_4_4_patch4/src/HSCP_MC_AODtoEDM_Python_Files/${python_file} /afs/cern.ch/work/a/askeeter/private/CMSSW_7_4_4_patch4/src/SUSYBSMAnalysis/HSCP/test/MakeEDMtuples/HSCParticleProducer_Signal_cfg.py
           cd /afs/cern.ch/work/a/askeeter/private/CMSSW_7_4_4_patch4/src/SUSYBSMAnalysis/HSCP/test/MakeEDMtuples/
           cmsRun HSCParticleProducer_Signal_cfg.py
           #Don't do the next file until the previous one has ran to completion, as these jobs are not sent to batch
           wait
       done
     #+END_SRC
*** Usable NTuples

**** Toggling Cluster Cleaning and/or Cross-Talk Inversion
     When creating analyzable NTuples, we (in general) would like both
     cluster cleaning as well as cross-talk inversion to
     enabled. However, we are not entirely positive that the
     combination of the two, or each individually are actually
     providing significant improvements to measurements of
     $\frac{dE}{dx}$. As such, samples should/can be created
     with/without both/either. To toggle either of these:

     Alter lines 105-106 of:
     =/afs/cern.ch/work/a/askeeter/private/CMSSW_7_4_4_patch4/src/SUSYBSMAnalysis/HSCP/test/AnalysisCode/Analysis_Step1_EventLoop.C=
     Which consist of two booleans: "useClusterCleaning" and
     "useCrossTalkInv".
     
     These should be set to the desired value prior to running
     analysis Step 1. The EDM and AOD files do not need to be
     regenerated to see these changes. Simply change the bools, then
     follow the below instructions for "Creating by Hand".

     Be careful though, as any previously ran Histos_mc... files will
     be overwritten unless their names have been changed in the
     Analysis_Samples.txt file.

**** Creating by Hand

    Once we have EDM files, we are ready to create usable ROOT files
    that we can perform analysis on. In order to do so, we have to
    call on the Launch.py program located in:

    =/afs/cern.ch/work/a/askeeter/private/CMSSW_7_4_4_patch4/src/SUSYBSMAnalysis/HSCP/test/AnalysisCode/Launch.py=
    
    Before calling this though, we must tell Launch which files that
    we would like to act on. This is accomplished by editing the
    "Analysis_Samples.txt" file which is located in the same directory
    as Launch. An example of this file is as follows:

    #+BEGIN_EXAMPLE
    #RELEASE, SAMPLE TYPE (0=data, 1=bckg, 2=signal, 3=signal systematic), SIGNAL NAME, INPUT FILE NAME, Legend Entry, PILEUP Distribution, Signal Mass, Sample Cross-section, PLOTTING FLAG (0=false, 1=true), Weight for events with 0, 1 and 2 charged HSCP in the event
    #HSCP Signal
    #"CMSSW_7_4",  2, "MChamp9_13TeV_M900"                , "MChamp9_13TeV_M900"            , "MC: mchamp9 900 GeV/#font[12]{c}^{2}"                     , "S10"   ,    900, +2.5000000000E-03, 1, 1.000, 1.000, 1.000
    #
    #"CMSSW_7_4",  2, "MChamp6_13TeV_M900"                , "MChamp6_13TeV_M900"            , "MC: mchamp6 900 GeV/#font[12]{c}^{2}"                     , "S10"   ,    900, +2.5000000000E-03, 1, 1.000, 1.000, 1.000
    "CMSSW_7_4",   2, "mchamp18_M_300"                    , "mchamp18_M_300_EDM"            , "MC: mchamp6 900 Gev/#font[12]{c}^{2}"                     , "S10"   ,    300, +2.5000000000E-03, 1, 1.000, 1.000, 1.000


    #
    #
    #
    #Background
    #"CMSSW_7_4", 1, "MC_13TeV_DYToMuMu"                  , "MC_13TeV_DYToMuMu"                     , "MC: DYToMuMu"                            , "S10"   ,      0, +1.3389000000E+03, 0, 0.000, 0.000, 0.000
    #+END_EXAMPLE

    There are several potential things that could be edited in this
    file, but we mainly only need to edit three. The first column
    corresponds to the version of CMSSW being used. The second
    corresponds to the sample type being read in, where keys and
    meanings are displayed at the top of the file. The third column is
    the desired name of the output data file once conversion is
    complete. The fourth column corresponds to the name of the input
    EDM file, with no ".root" extension. The next column is a label
    to be used in plots produced by steps two and higher. The next
    column "s10" does not need to be changed.This is the type of
    pileup distribution. The next column must be changed to equal the
    mass of the desired particle in GeV/c^2. None of the other numbers
    need to be changed. It is of course possible to process multiple
    files in this step. 

    In order to produce usable tuples, we must simply run step
    one. Step one converts our EDM files to a usable root file. 
    Now that the above file has been properly edited, we simply run:

    #+BEGIN_SRC sh
      python Launch.py 1
    #+END_SRC

    Which will run step 1 of the analysis code. Upon completion, the
    data root tuples will be stored in the "Results" folder of the
    same directory as Launch. It should be noted that the jobs are
    auto-batched to Cern's 2 day queue. 

    Once can also run the jobs locally by looking in the "FARM/inputs"
    folder. You will see ####_HscpAnalysis.sh where the numbers
    correspond to the batched job number. Less them and the bottom
    lines will tell you what samples they are running on if you're not
    sure. Then just do:

    #+BEGIN_SRC sh
      source filename.sh >& output.txt &
    #+END_SRC

    To run locally (and redirect the output). Running locally is
    usually faster than sending to batch, but if the local running
    takes longer than two hours, the job will be killed automatically.
   
**** Creating by Automation

     The following script will simply populate the
     "AnalysisSamples_Gloabal.txt" file with all of the EDM files that
     are available for conversion. Careful with this program though,
     as it merely appends to the already existing file. It is best to
     delete the contents of the already existing file before running
     this in order to avoid the creation of duplicate files. 
     
     #+NAME: edm-to-ntuple-creator
     #+BEGIN_SRC sh :exports both :tangle ../HSCP_MC_Creation/Scripts/EdmToNtupleCreator.sh :dir /ssh:askeeter@lxplus.cern.ch:/afs/cern.ch/work/a/askeeter/private/CMSSW_7_4_4_patch4/src
       #!/bin/bash

       shopt -s nullglob
       filearray=( "HSCP_MC_Root_Files"/*EDM* )
       shopt -u nullglob
       #printf "%s\n" "${filearray[@]}"
       appendTo="/afs/cern.ch/work/a/askeeter/private/CMSSW_7_4_4_patch4/src/SUSYBSMAnalysis/HSCP/test/AnalysisCode/Analysis_Samples.txt"
       #Create a python file for each config file    
       for file in "${filearray[@]}"
       do
           parts=(${file//_/ })
           charge=${parts[3]}
           #Extract the number from the charge
           chargeFixed=$(echo $charge | tr -dc '0-9')
           mass=${parts[5]}    
           aod_file="mchamp${chargeFixed}_M_${mass}_AOD.root"
           edm_file="mchamp${chargeFixed}_M_${mass}_EDM"
           gen_file="mchamp${chargeFixed}_M_${mass}"
           #We need to append to the Analysis_Samples.txt file
           cat >> /afs/cern.ch/work/a/askeeter/private/CMSSW_7_4_4_patch4/src/SUSYBSMAnalysis/HSCP/test/AnalysisCode/Analysis_Samples.txt << EOF
       "CMSSW_7_4",   2, "$gen_file"    ,"$edm_file"    , "MC: mchamp${chargeFixed} ${mass} GeV/#font[12]{c}^{2}" , "S10", $mass, +9.8480000000E+01, 0, 1.000, 1.000, 1.000
       EOF
       done
            
     #+END_SRC

     Once the list has been populated, the next step is the same as
     the above. Simply run:

     #+NAME: launch-Step-1
     #+BEGIN_SRC sh :exports code :dir /ssh:askeeter@lxplus.cern.ch:/afs/cern.ch/work/a/askeeter/private/CMSSW_7_4_4_patch4/src/SUSYBSMAnalysis/HSCP/test/AnalysisCode/
python Launch.py 1
     #+END_SRC
     
*** Plots

    Step 2 of the analysis code involves generating plots. In order to
    run this step, you must simply use the number "2" with Launch.py,
    similar to the previous step. However, you must make sure to edit
    the file "Analysis_Global.h" located in the Launch.py directory,
    around line 157. Make sure that the "BaseDirectory" points to
    where your samples being analyzed are located. Then, you can
    simply run step 2 AFTER step 1.
    
** Analysis and Derivations
*** Mass reconstruction from $I_{h}$
    This information is taken from [[http://www.arxiv.org/pdf/1101.1645.pdf][here]].

    $I_{h}=K\left(\frac{m}{p}\right)^2+C$
    
    Where the values of the fit parameters are as follows:
    $K=2.579\pm 0.001 MeV cm^{-1} c^{2}$
    $C=2.557\pm 0.001 MeV cm^{-1}$

    The above can be rearranged to solve for the mass:
    $m=p\sqrt{\frac{I_{h}-C}{K}}$

    Applying propagation of errors one obtains that:
    $\sigma_{m}=\frac{p}{2} \left[\frac{K^{-3}\sigma^2_K+K\sigma^2_{C}}{}\right]^\frac{1}{2}$
    Note that the momentum plugged into this formula needs to be given
    in units of MeV/c, and the resulting error will be in units of
    MeV/c^2. 
* Playing around with org examples                                   :export:

  #+begin_src python :results file
    import matplotlib, numpy
    #matplotlib.use('Agg')
    import matplotlib.pyplot as plt
    fig=plt.figure(figsize=(4,2))
    x=numpy.linspace(-15,15)
    plt.plot(numpy.sin(x)/x)
    fig.tight_layout()
    plt.savefig('/tmp/python-matplot-fig.png')
    return '/tmp/python-matplot-fig.png' # return filename to org-mode
#+end_src

  #+RESULTS:
  [[file:/tmp/python-matplot-fig.png]]

  #+BEGIN_SRC cpp
    #include <iostream>
    using namespace std;
    int main(void){
      cout << "Hello world!" << endl;
      }
  #+END_SRC

  #+RESULTS:
  : Hello world!
 
  $-\left<\frac{dE}{dx}\right>=4\pi
        N_{A}r_{e}^2m_{e}c^2z^2\frac{Z}{A}\frac{1}{\beta^2}\left[\frac{1}{2}\ln\frac{2m_ec^2\beta^2\gamma^2T_{max}}{I^2}-\beta^2-\frac{\delta(\beta\gamma)}{2}\right]\times
        Q^2$



  
* Code Snippets                                                      :export:
** Bash script populate array of all files

   To populate an array of all of the files in a certain folder you
   can do something similar to:
   #+BEGIN_SRC sh
     shopt -s nullglob
     filearray=( "HSCP_MC_sh_Files"/* )
     shopt -u nullglob
     #Now to loop through them
     for file in "${filearray[@]}"
     do
         #strip off the characters that we don't need
         fileFixed=${file:17}
     done
   #+END_SRC
   This is what I use in my script that sends jobs to the cern batch
   service, as well as my script that creates the batch shell files
   based on the available configuration files.
** Bash script extract numbers from filename

   Similar to the above, we must first obtain a file name that we wish
   to parse. So:
   #+BEGIN_SRC sh
     shopt -s nullglob
     filearray=( "HSCP_MC_cfg_Files"/* )
     shopt -u nullglob
     #Now to loop through them
     for file in "${filearray[@]}"
     do
         parts=(${file//_/ })
         charge=${parts[3]}
         #extract the number from the charge
         chargeFixed=$(echo $charge | tr -dc '0-9')
         mass=${parts[5]}
         #Now we have our relevant info from the file!
     done
   #+END_SRC 
